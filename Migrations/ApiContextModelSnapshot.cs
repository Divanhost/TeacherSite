// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TeachApi.Models;

namespace TchSite.Migrations
{
    [DbContext(typeof(ApiContext))]
    partial class ApiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "3.0.0-preview7.19362.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("TeachApi.Models.Card", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("HostCardId");

                    b.Property<string>("Image");

                    b.Property<string>("InnerImage");

                    b.Property<string>("InnerText");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("TeachApi.Models.Document", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("CardID");

                    b.Property<string>("Description");

                    b.Property<string>("Image");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.HasIndex("CardID");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("TeachApi.Models.Event", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("TeachApi.Models.Photo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int?>("EventID");

                    b.Property<string>("Image");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.HasIndex("EventID");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("TeachApi.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("ALevel");

                    b.Property<bool>("IsApproved");

                    b.Property<string>("Login");

                    b.Property<string>("Password");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TeachApi.Models.Document", b =>
                {
                    b.HasOne("TeachApi.Models.Card", null)
                        .WithMany("Documents")
                        .HasForeignKey("CardID");
                });

            modelBuilder.Entity("TeachApi.Models.Photo", b =>
                {
                    b.HasOne("TeachApi.Models.Event", null)
                        .WithMany("Photos")
                        .HasForeignKey("EventID");
                });
#pragma warning restore 612, 618
        }
    }
}
